// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CounterLaab extends Entity{
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
    this.set("count", Value.fromBigInt(BigInt.fromI32(0)));
  }

  save(): void {
    let id = this.get("count")!;
    assert(id !== null, "Cannot save Balancer entity without a count");
    assert(
      id.kind == ValueKind.BIGINT,
      "Cannot save Balancer entity with non-string ID. " +
      'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CounterLaab", id.toString(), this);
  }

  static load(id: string): CounterLaab | null {
    return store.get("CounterLaab", id) as CounterLaab | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt  {
    let value = this.get("count")!;
    return value.toBigInt();
  }

  set count(value: BigInt) {
      this.set("count", Value.fromBigInt(value as BigInt));
  }
}

export class Balancer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save Balancer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Balancer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Balancer", id.toString(), this);
  }

  static load(id: string): Balancer | null {
    return store.get("Balancer", id) as Balancer | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get color(): string {
    let value = this.get("color")!;
    return value.toString();
  }

  set color(value: string) {
    this.set("color", Value.fromString(value));
  }

  get poolCount(): i32 {
    let value = this.get("poolCount")!;
    return value.toI32();
  }

  set poolCount(value: i32) {
    this.set("poolCount", Value.fromI32(value));
  }

  get finalizedPoolCount(): i32 {
    let value = this.get("finalizedPoolCount")!;
    return value.toI32();
  }

  set finalizedPoolCount(value: i32) {
    this.set("finalizedPoolCount", Value.fromI32(value));
  }

  get crpCount(): i32 {
    let value = this.get("crpCount")!;
    return value!.toI32();
  }

  set crpCount(value: i32) {
    this.set("crpCount", Value.fromI32(value));
  }

  get pools(): Array<string> | null {
    let value = this.get("pools")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pools(value: Array<string> | null) {
    if (value === null) {
      this.unset("pools");
    } else {
      this.set("pools", Value.fromStringArray(value as Array<string>));
    }
  }

  get txCount(): BigInt {
    let value = this.get("txCount")!;
    return value.toBigInt();
  }

  set txCount(value: BigInt) {
    this.set("txCount", Value.fromBigInt(value));
  }

  get totalLiquidity(): BigDecimal {
    let value = this.get("totalLiquidity")!;
    return value.toBigDecimal();
  }

  set totalLiquidity(value: BigDecimal) {
    this.set("totalLiquidity", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume")!;
    return value.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee")!;
    return value.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get controller(): Bytes {
    let value = this.get("controller")!;
    return value.toBytes();
  }

  set controller(value: Bytes) {
    this.set("controller", Value.fromBytes(value));
  }

  get publicSwap(): boolean {
    let value = this.get("publicSwap")!;
    return value.toBoolean();
  }

  set publicSwap(value: boolean) {
    this.set("publicSwap", Value.fromBoolean(value));
  }

  get finalized(): boolean {
    let value = this.get("finalized")!;
    return value.toBoolean();
  }

  set finalized(value: boolean) {
    this.set("finalized", Value.fromBoolean(value));
  }

  get crp(): boolean {
    let value = this.get("crp")!;
    return value!.toBoolean();
  }

  set crp(value: boolean) {
    this.set("crp", Value.fromBoolean(value));
  }

  get crpController(): Bytes | null {
    let value = this.get("crpController")!;
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set crpController(value: Bytes | null) {
    if (value === null) {
      this.unset("crpController");
    } else {
      this.set("crpController", Value.fromBytes(value as Bytes));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get rights(): Array<string> {
    let value = this.get("rights")!;
    return value.toStringArray();
  }

  set rights(value: Array<string>) {
    this.set("rights", Value.fromStringArray(value));
  }

  get cap(): BigInt | null {
    let value = this.get("cap")!;
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cap(value: BigInt | null) {
    if (value === null) {
      this.unset("cap");
    } else {
      this.set("cap", Value.fromBigInt(value as BigInt));
    }
  }

  get active(): boolean {
    let value = this.get("active")!;
    return value.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get swapFee(): BigDecimal {
    let value = this.get("swapFee")!;
    return value.toBigDecimal();
  }

  set swapFee(value: BigDecimal) {
    this.set("swapFee", Value.fromBigDecimal(value));
  }

  get totalWeight(): BigDecimal {
    let value = this.get("totalWeight")!;
    return value.toBigDecimal();
  }

  set totalWeight(value: BigDecimal) {
    this.set("totalWeight", Value.fromBigDecimal(value));
  }

  get totalShares(): BigDecimal {
    let value = this.get("totalShares")!;
    return value.toBigDecimal();
  }

  set totalShares(value: BigDecimal) {
    this.set("totalShares", Value.fromBigDecimal(value));
  }

  get totalSwapVolume(): BigDecimal {
    let value = this.get("totalSwapVolume")!;
    return value.toBigDecimal();
  }

  set totalSwapVolume(value: BigDecimal) {
    this.set("totalSwapVolume", Value.fromBigDecimal(value));
  }

  get totalSwapFee(): BigDecimal {
    let value = this.get("totalSwapFee")!;
    return value.toBigDecimal();
  }

  set totalSwapFee(value: BigDecimal) {
    this.set("totalSwapFee", Value.fromBigDecimal(value));
  }

  get liquidity(): BigDecimal {
    let value = this.get("liquidity")!;
    return value.toBigDecimal();
  }

  set liquidity(value: BigDecimal) {
    this.set("liquidity", Value.fromBigDecimal(value));
  }

  get tokensList(): Array<Bytes> {
    let value = this.get("tokensList")!;
    return value.toBytesArray();
  }

  set tokensList(value: Array<Bytes>) {
    this.set("tokensList", Value.fromBytesArray(value));
  }

  get tokens(): Array<string> | null {
    let value = this.get("tokens")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("tokens");
    } else {
      this.set("tokens", Value.fromStringArray(value as Array<string>));
    }
  }

  get shares(): Array<string> | null {
    let value = this.get("shares")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set shares(value: Array<string> | null) {
    if (value === null) {
      this.unset("shares");
    } else {
      this.set("shares", Value.fromStringArray(value as Array<string>));
    }
  }

  get createTime(): i32 {
    let value = this.get("createTime")!;
    return value.toI32();
  }

  set createTime(value: i32) {
    this.set("createTime", Value.fromI32(value));
  }

  get tokensCount(): BigInt {
    let value = this.get("tokensCount")!;
    return value.toBigInt();
  }

  set tokensCount(value: BigInt) {
    this.set("tokensCount", Value.fromBigInt(value));
  }

  get holdersCount(): BigInt {
    let value = this.get("holdersCount")!;
    return value.toBigInt();
  }

  set holdersCount(value: BigInt) {
    this.set("holdersCount", Value.fromBigInt(value));
  }

  get joinsCount(): BigInt {
    let value = this.get("joinsCount")!;
    return value.toBigInt();
  }

  set joinsCount(value: BigInt) {
    this.set("joinsCount", Value.fromBigInt(value));
  }

  get exitsCount(): BigInt {
    let value = this.get("exitsCount")!;
    return value.toBigInt();
  }

  set exitsCount(value: BigInt) {
    this.set("exitsCount", Value.fromBigInt(value));
  }

  get swapsCount(): BigInt {
    let value = this.get("swapsCount")!;
    return value.toBigInt();
  }

  set swapsCount(value: BigInt) {
    this.set("swapsCount", Value.fromBigInt(value));
  }

  get factoryID(): string {
    let value = this.get("factoryID")!;
    return value.toString();
  }

  set factoryID(value: string) {
    this.set("factoryID", Value.fromString(value));
  }

  get tx(): Bytes | null {
    let value = this.get("tx")!;
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (value === null) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(value as Bytes));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save PoolToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolToken", id.toString(), this);
  }

  static load(id: string): PoolToken | null {
    return store.get("PoolToken", id) as PoolToken | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId")!;
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals")!;
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get address(): string {
    let value = this.get("address")!;
    return value.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance")!;
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get denormWeight(): BigDecimal {
    let value = this.get("denormWeight")!;
    return value.toBigDecimal();
  }

  set denormWeight(value: BigDecimal) {
    this.set("denormWeight", Value.fromBigDecimal(value));
  }
}

export class PoolShare extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save PoolShare entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolShare entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolShare", id.toString(), this);
  }

  static load(id: string): PoolShare | null {
    return store.get("PoolShare", id) as PoolShare | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress")!;
    return value.toString();
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get poolId(): string {
    let value = this.get("poolId")!;
    return value.toString();
  }

  set poolId(value: string) {
    this.set("poolId", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance")!;
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sharesOwned(): Array<string> | null {
    let value = this.get("sharesOwned")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sharesOwned(value: Array<string> | null) {
    if (value === null) {
      this.unset("sharesOwned");
    } else {
      this.set("sharesOwned", Value.fromStringArray(value as Array<string>));
    }
  }

  get txs(): Array<string> | null {
    let value = this.get("txs")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set txs(value: Array<string> | null) {
    if (value === null) {
      this.unset("txs");
    } else {
      this.set("txs", Value.fromStringArray(value as Array<string>));
    }
  }

  get swaps(): Array<string> | null {
    let value = this.get("swaps")!;
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set swaps(value: Array<string> | null) {
    if (value === null) {
      this.unset("swaps");
    } else {
      this.set("swaps", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller")!;
    return value.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenIn(): Bytes {
    let value = this.get("tokenIn")!;
    return value.toBytes();
  }

  set tokenIn(value: Bytes) {
    this.set("tokenIn", Value.fromBytes(value));
  }

  get tokenInSym(): string {
    let value = this.get("tokenInSym")!;
    return value.toString();
  }

  set tokenInSym(value: string) {
    this.set("tokenInSym", Value.fromString(value));
  }

  get tokenOut(): Bytes {
    let value = this.get("tokenOut")!;
    return value.toBytes();
  }

  set tokenOut(value: Bytes) {
    this.set("tokenOut", Value.fromBytes(value));
  }

  get tokenOutSym(): string {
    let value = this.get("tokenOutSym")!;
    return value.toString();
  }

  set tokenOutSym(value: string) {
    this.set("tokenOutSym", Value.fromString(value));
  }

  get tokenAmountIn(): BigDecimal {
    let value = this.get("tokenAmountIn")!;
    return value.toBigDecimal();
  }

  set tokenAmountIn(value: BigDecimal) {
    this.set("tokenAmountIn", Value.fromBigDecimal(value));
  }

  get tokenAmountOut(): BigDecimal {
    let value = this.get("tokenAmountOut")!;
    return value.toBigDecimal();
  }

  set tokenAmountOut(value: BigDecimal) {
    this.set("tokenAmountOut", Value.fromBigDecimal(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(value as string));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(value as string));
    }
  }

  get value(): BigDecimal {
    let value = this.get("value")!;
    return value.toBigDecimal();
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }

  get feeValue(): BigDecimal {
    let value = this.get("feeValue")!;
    return value.toBigDecimal();
  }

  set feeValue(value: BigDecimal) {
    this.set("feeValue", Value.fromBigDecimal(value));
  }

  get poolTotalSwapVolume(): BigDecimal {
    let value = this.get("poolTotalSwapVolume")!;
    return value.toBigDecimal();
  }

  set poolTotalSwapVolume(value: BigDecimal) {
    this.set("poolTotalSwapVolume", Value.fromBigDecimal(value));
  }

  get poolTotalSwapFee(): BigDecimal {
    let value = this.get("poolTotalSwapFee")!;
    return value.toBigDecimal();
  }

  set poolTotalSwapFee(value: BigDecimal) {
    this.set("poolTotalSwapFee", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity")!;
    return value.toBigDecimal();
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp")!;
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx(): Bytes {
    let value = this.get("tx")!;
    return value.toBytes();
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get event(): string | null {
    let value = this.get("event")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (value === null) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(value as string));
    }
  }

  get block(): i32 {
    let value = this.get("block")!;
    return value.toI32();
  }

  set block(value: i32) {
    this.set("block", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp")!;
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get gasUsed(): BigDecimal {
    let value = this.get("gasUsed")!;
    return value.toBigDecimal();
  }

  set gasUsed(value: BigDecimal) {
    this.set("gasUsed", Value.fromBigDecimal(value));
  }

  get gasPrice(): BigDecimal {
    let value = this.get("gasPrice")!;
    return value.toBigDecimal();
  }

  set gasPrice(value: BigDecimal) {
    this.set("gasPrice", Value.fromBigDecimal(value));
  }

  get poolAddress(): string | null {
    let value = this.get("poolAddress")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolAddress(value: string | null) {
    if (value === null) {
      this.unset("poolAddress");
    } else {
      this.set("poolAddress", Value.fromString(value as string));
    }
  }

  get userAddress(): string | null {
    let value = this.get("userAddress")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string | null) {
    if (value === null) {
      this.unset("userAddress");
    } else {
      this.set("userAddress", Value.fromString(value as string));
    }
  }

  get action(): string | null {
    let value = this.get("action")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (value === null) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(value as string));
    }
  }

  get sender(): Bytes | null {
    let value = this.get("sender")!;
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (value === null) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(value as Bytes));
    }
  }
}

export class TokenPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id")!;
    assert(id !== null, "Cannot save TokenPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenPrice", id.toString(), this);
  }

  static load(id: string): TokenPrice | null {
    return store.get("TokenPrice", id) as TokenPrice | null;
  }

  get id(): string {
    let value = this.get("id")!;
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (value === null) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(value as string));
    }
  }

  get name(): string | null {
    let value = this.get("name")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals")!;
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get price(): BigDecimal {
    let value = this.get("price")!;
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get poolLiquidity(): BigDecimal {
    let value = this.get("poolLiquidity")!;
    return value.toBigDecimal();
  }

  set poolLiquidity(value: BigDecimal) {
    this.set("poolLiquidity", Value.fromBigDecimal(value));
  }

  get poolTokenId(): string | null {
    let value = this.get("poolTokenId")!;
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolTokenId(value: string | null) {
    if (value === null) {
      this.unset("poolTokenId");
    } else {
      this.set("poolTokenId", Value.fromString(value as string));
    }
  }
}
